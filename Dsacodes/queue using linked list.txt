#include <stdio.h>
#include <stdlib.h>
// Node structure for the queue
struct Node {
    int data;
    struct Node* next;
};
// Queue structure with front and rear pointers
struct Queue {
    struct Node* front;
    struct Node* rear;
};
// Function to create a new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

// Function to create an empty queue
struct Queue* createQueue() {
    struct Queue* queue = (struct Queue*)malloc(sizeof(struct Queue));
    queue->front = NULL;
    queue->rear = NULL;
    return queue;
}

// Function to check if the queue is empty
int isEmpty(struct Queue* queue) {
    return queue->front == NULL;
}


// Function to enqueue an element into the queue
void enqueue(struct Queue* queue, int data) {
    struct Node* newNode = createNode(data);
    
    if (queue->rear == NULL) {
        // If the queue is empty, both front and rear will point to the new node
        queue->front = queue->rear = newNode;
        return;
    }

    // Add the new node at the end of the queue and update the rear
    queue->rear->next = newNode;
    queue->rear = newNode;
}

// Function to dequeue an element from the queue
int dequeue(struct Queue* queue) {
    if (queue->front == NULL) {
        printf("Queue is empty, cannot dequeue.\n");
        return -1;
    }

    // Store the front node and move front to the next node
    struct Node* temp = queue->front;
    queue->front = queue->front->next;

    // If the queue becomes empty, update rear to NULL
    if (queue->front == NULL)
        queue->rear = NULL;
    int dequeuedData = temp->data;
    free(temp);
    return dequeuedData;
}


// Function to display the elements of the queue
void displayQueue(struct Queue* queue) {
    struct Node* temp = queue->front;
    while (temp != NULL) {
        printf("%d -> ", temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}

int main() {
    struct Queue* queue = createQueue();

    enqueue(queue, 10);
    enqueue(queue, 20);
    enqueue(queue, 30);
    enqueue(queue, 40);

    printf("Queue after enqueuing elements: ");
    displayQueue(queue);

    printf("Dequeued: %d\n", dequeue(queue));
    printf("Dequeued: %d\n", dequeue(queue));

    printf("Queue after dequeuing elements: ");
    displayQueue(queue);

    return 0;
}
