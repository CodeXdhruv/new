#include <iostream>
using namespace std;

struct node {
    int data;
    struct node* next;
    struct node* prev;
};


struct node* createNode(int value) {
    struct node* node1 = (struct node*)malloc(sizeof(struct node));
    node1->data = value;
    node1->prev = NULL;
    node1->next = NULL;
    return node1;
}


void forwardTraversal(struct node* head) {
    struct node* temp = head;
    while (temp != NULL) {
        cout << temp->data << " ";
        temp = temp->next;
    }
}

void backwardTraversal(struct node* third) {
    struct node* temp = third;
    while (temp != NULL) {
        cout << temp->data << " ";
        temp = temp->prev;
    }
}


struct node* insertatBegin(struct node* head, int value) {
    struct node* node1 = createNode(value);
    node1->next = head;
    if (head != NULL) {
        head->prev = node1;
    }
    head = node1;
    return head;
}

struct node* insertatEnd(struct node* head, int value) {
    struct node* temp = head;
    struct node* node1 = createNode(value);
    
    if (head == NULL) {
        return node1;
    }

    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = node1;
    node1->prev = temp;
    
    return head;
}

struct node* deleteBegin(struct node* head) {
    if (head == NULL) {
        cout << "List is empty." << endl;
        return NULL;
    }
    
    struct node* temp = head;
    head = head->next;
    
    if (head != NULL) {
        head->prev = NULL;
    }
    
    free(temp);
    return head;
}

struct node* delteEnd(struct node* head){
    struct node* temp=head;
    while(temp->next!=NULL){
        temp=temp->next;
    }
    temp->prev->next=NULL;
    free(temp);
    return head;
}

struct node* insertatPos(struct node* head,int value,int pos){
    struct node* node1=createNode(value);
    struct node*temp=head;
    for(int i=1;i<pos;i++){
        temp=temp->next;
    }

    node1->prev=temp;
    node1->next=temp->next;
    temp->next=node1;
    temp->next->prev=node1;
     
    return head;
}
struct node* deleteatPos(struct node* head,int pos){
    struct node* temp=head;
    for(int i=1;i<=pos;i++){
        temp=temp->next;
    }
    temp->prev->next=temp->next;
    free(temp);
    return head;
    
}
int main() {
    struct node* head = createNode(10);
    struct node* second = createNode(20);
    struct node* third = createNode(30);
    
    head->next = second;
    second->prev = head;
    second->next = third;
    third->prev = second;
    forwardTraversal(head);
    cout<<endl;
    backwardTraversal(third);
    head = insertatBegin(head, 60);
    cout<<endl;
    forwardTraversal(head);
    cout<<endl;
    head = insertatEnd(head, 70);
    forwardTraversal(head);
    cout<<endl;
    head = deleteBegin(head);
    forwardTraversal(head);
    cout<<endl;
    head = delteEnd(head);
    forwardTraversal(head);
    cout<<endl;
    head=insertatPos(head,80,2);
    forwardTraversal(head);
    cout<<endl;
    head=deleteatPos(head,3);
    forwardTraversal(head);
    return 0;
}
