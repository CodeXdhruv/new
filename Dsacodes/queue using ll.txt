#include<iostream>
using namespace std;

struct node {
    int data;
    struct node* next;
};

struct Queue {
    struct node* front;
    struct node* rear;
};

struct node* createNode(int value) {
    struct node* node1 = new node;
    node1->data = value;
    node1->next = NULL;
    return node1;
}

void initQueue(struct Queue* queue) {
    queue->front = NULL;
    queue->rear = NULL;
}

bool isEmpty(struct Queue* queue) {
    return queue->front == NULL;
}

void Enqueue(struct Queue* queue, int value) {
    struct node* node1 = createNode(value);
    if (queue->front == NULL && queue->rear == NULL) {
        queue->front = node1;
        queue->rear = node1;
    } else {
        queue->rear->next = node1;
        queue->rear = node1;
    }
}

int Dequeue(struct Queue* queue) {
    if (isEmpty(queue)) {
        cout << "Queue is Empty" << endl;
        return -1;
    }

    struct node* temp = queue->front;
    int dequedata = temp->data;

    queue->front = queue->front->next;
    if (queue->front == NULL) {
        queue->rear = NULL;
    }

    delete temp;
    return dequedata;
}

int main() {
    struct Queue queue;
    initQueue(&queue);
    
    Enqueue(&queue, 10);
    Enqueue(&queue, 20);
    Enqueue(&queue, 30);

    cout << "Dequeued: " << Dequeue(&queue) << endl;
    cout << "Dequeued: " << Dequeue(&queue) << endl;
    cout << "Dequeued: " << Dequeue(&queue) << endl;
    cout << "Dequeued: " << Dequeue(&queue) << endl;

    return 0;
}
